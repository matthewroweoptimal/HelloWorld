// DO NOT EDIT THIS FILE
// Created by xmlerator on Tuesday, 23 August 2016 at 04:12:29 PM.

#ifndef __LOUD_ENUM_H__
#define __LOUD_ENUM_H__

typedef enum {
	eMODEL_INVALID = -1,
	eMODEL_MODERN = 0,
	eMODEL_VINTAGE = 1,
	eMODEL_FENCE
} LOUD_model;

typedef enum {
	eSLOPE_INVALID = -1,
	eSLOPE_SLOPE_6 = 0,
	eSLOPE_SLOPE_12 = 1,
	eSLOPE_SLOPE_18 = 2,
	eSLOPE_SLOPE_24 = 3,
	eSLOPE_SLOPE_30 = 4,
	eSLOPE_SLOPE_36 = 5,
	eSLOPE_SLOPE_42 = 6,
	eSLOPE_SLOPE_48 = 7,
	eSLOPE_FENCE
} LOUD_slope;

typedef enum {
	eKNEE_INVALID = -1,
	eKNEE_SOFT = 0,
	eKNEE_HARD = 1,
	eKNEE_FENCE
} LOUD_knee;

typedef enum {
	eEQ_INVALID = -1,
	eEQ_LO_PASS = 0,
	eEQ_HI_PASS = 1,
	eEQ_PARAMETRIC = 2,
	eEQ_LO_SHELF = 3,
	eEQ_HI_SHELF = 4,
	eEQ_LO_SHELF_1ST_ORDER = 5,
	eEQ_HI_SHELF_1ST_ORDER = 6,
	eEQ_NOTCH = 7,
	eEQ_BAND_PASS = 8,
	eEQ_LO_PASS_1ST_ORDER = 9,
	eEQ_HI_PASS_1ST_ORDER = 10,
	eEQ_ALLPASS = 11,
	eEQ_ALLPASS_1ST_ORDER = 12,
	eEQ_LO_PASS_VAR = 13,
	eEQ_HI_PASS_VAR = 14,
	eEQ_FENCE
} LOUD_eq;

typedef enum {
	eRESPONSE_INVALID = -1,
	eRESPONSE_BUTTERWORTH = 0,
	eRESPONSE_LINKWITZ_RILEY = 1,
	eRESPONSE_BESSEL = 2,
	eRESPONSE_FENCE
} LOUD_response;

typedef enum {
	eREVERB_INVALID = -1,
	eREVERB_PLATE = 0,
	eREVERB_AMBIENCE = 1,
	eREVERB_SMALL_ROOM = 2,
	eREVERB_MEDIUM_ROOM = 3,
	eREVERB_LARGE_ROOM = 4,
	eREVERB_HALL = 5,
	eREVERB_CATHEDRAL = 6,
	eREVERB_GATED_REVERB = 7,
	eREVERB_SHORT_SPRING = 8,
	eREVERB_FENCE
} LOUD_reverb;

typedef enum {
	eDELAY_INVALID = -1,
	eDELAY_MONO = 0,
	eDELAY_TAPE_ECHO = 1,
	eDELAY_STEREO = 2,
	eDELAY_PING_PONG = 3,
	eDELAY_MULTITAP = 4,
	eDELAY_FENCE
} LOUD_delay;

typedef enum {
	eSENDSRC_INVALID = -1,
	eSENDSRC_POSTFADER = 0,
	eSENDSRC_PREFADER = 1,
	eSENDSRC_PREDSP = 2,
	eSENDSRC_FENCE
} LOUD_sendsrc;

typedef enum {
	eMETERTYPE_INVALID = -1,
	eMETERTYPE_NORMAL = 0,
	eMETERTYPE_GATEGAINRED = 1,
	eMETERTYPE_COMPGAINRED = 2,
	eMETERTYPE_DYNEQGAIN = 3,
	eMETERTYPE_FENCE
} LOUD_metertype;

typedef enum {
	eROUTINGSRC_INVALID = -1,
	eROUTINGSRC_NONE = 0,
	eROUTINGSRC_MICPRE = 1000,
	eROUTINGSRC_IPAD_USB = 2000,
	eROUTINGSRC_DANTE = 3000,
	eROUTINGSRC_INPUTPOSTDSP = 4000,
	eROUTINGSRC_RETURNPOSTDSP = 5000,
	eROUTINGSRC_FXSEND = 6000,
	eROUTINGSRC_FXREVERBPOSTDSP = 7000,
	eROUTINGSRC_FXDELAYPOSTDSP = 8000,
	eROUTINGSRC_MAINOUTPUTPREFADER = 9000,
	eROUTINGSRC_MAINOUTPUT = 10000,
	eROUTINGSRC_MONITOROUTPUT = 11000,
	eROUTINGSRC_SUBGROUPOUTPUT = 12000,
	eROUTINGSRC_AUXOUTPUT = 13000,
	eROUTINGSRC_MATRIXOUTPUT = 14000,
	eROUTINGSRC_GENERATOR = 15000,
	eROUTINGSRC_LASTVALUE = 16000,
	eROUTINGSRC_FENCE
} LOUD_routingsrc;

typedef enum {
	ePALETTE_INVALID = -1,
	ePALETTE_INHERIT = -2,
	ePALETTE_NONE = -1,
	ePALETTE_COLOR_0 = 0,
	ePALETTE_COLOR_2 = 2,
	ePALETTE_COLOR_4 = 4,
	ePALETTE_COLOR_6 = 6,
	ePALETTE_COLOR_8 = 8,
	ePALETTE_COLOR_10 = 10,
	ePALETTE_COLOR_12 = 12,
	ePALETTE_COLOR_13 = 13,
	ePALETTE_COLOR_15 = 15,
	ePALETTE_COLOR_16 = 16,
	ePALETTE_COLOR_30 = 30,
	ePALETTE_FENCE
} LOUD_palette;

typedef enum {
	eFUNCTION_INVALID = -1,
	eFUNCTION_SINE = 0,
	eFUNCTION_WHITENOISE = 1,
	eFUNCTION_PINKNOISE = 2,
	eFUNCTION_FENCE
} LOUD_function;

typedef enum {
	eAMPSRC_INVALID = -1,
	eAMPSRC_NONE = 0,
	eAMPSRC_HF = 1,
	eAMPSRC_MF = 2,
	eAMPSRC_LF = 3,
	eAMPSRC_ALT = 4,
	eAMPSRC_FENCE
} LOUD_ampsrc;

typedef enum {
	eCS_FAULT_INVALID = -1,
	eCS_FAULT_NONE = 1,
	eCS_FAULT_OPEN = 2,
	eCS_FAULT_SHORT = 3,
	eCS_FAULT_RISK = 4,
	eCS_FAULT_FENCE
} LOUD_cs_fault;

typedef enum {
	eLOGO_MODE_INVALID = -1,
	eLOGO_MODE_ON = 1,
	eLOGO_MODE_ON_LIMITING = 2,
	eLOGO_MODE_OFF = 3,
	eLOGO_MODE_FAULT_ONLY = 4,
	eLOGO_MODE_SPECIAL = 5,
	eLOGO_MODE_FENCE
} LOUD_logo_mode;

typedef enum {
	eIDENTIFY_MODE_INVALID = -1,
	eIDENTIFY_MODE_OFF = 0,
	eIDENTIFY_MODE_ADVERTISE = 1,
	eIDENTIFY_MODE_IDENTIFY = 2,
	eIDENTIFY_MODE_CONNECTED = 3,
	eIDENTIFY_MODE_FENCE
} LOUD_identify_mode;

typedef enum {
	eDISP_MODE_INVALID = -1,
	eDISP_MODE_BRIGHT = 0,
	eDISP_MODE_OFF = 1,
	eDISP_MODE_DIM = 2,
	eDISP_MODE_FENCE
} LOUD_disp_mode;

typedef enum {
	eAUDIO_MODE_INVALID = -1,
	eAUDIO_MODE_AUTO = 1,
	eAUDIO_MODE_ANALOG = 2,
	eAUDIO_MODE_DANTE = 3,
	eAUDIO_MODE_FENCE
} LOUD_audio_mode;

typedef enum {
	eTEST_MODE_INVALID = -1,
	eTEST_MODE_DISABLED = 1,
	eTEST_MODE_ENABLED = 2,
	eTEST_MODE_MUTE_FROM_SOLO = 3,
	eTEST_MODE_SEQUENCE = 4,
	eTEST_MODE_CYCLE = 5,
	eTEST_MODE_FENCE
} LOUD_test_mode;

typedef enum {
	eOLY_PROFILES_INVALID = -1,
	eOLY_PROFILES_CUSTOM1 = 0,
	eOLY_PROFILES_PRESET1 = 1,
	eOLY_PROFILES_PRESET2 = 2,
	eOLY_PROFILES_PRESET3 = 3,
	eOLY_PROFILES_PRESET4 = 4,
	eOLY_PROFILES_FENCE
} LOUD_oly_profiles;

typedef enum {
	eCARDIOID_INVALID = -1,
	eCARDIOID_CARDIOID_FRONT = 0,
	eCARDIOID_CARDIOID_REAR_2_STACK = 1,
	eCARDIOID_CARDIOID_REAR_3_STACK = 2,
	eCARDIOID_FENCE
} LOUD_cardioid;

typedef enum {
	eCDD_PRESETS_INVALID = -1,
	eCDD_PRESETS_LIVE = 0,
	eCDD_PRESETS_USER = 1,
	eCDD_PRESETS_FACTORY1 = 2,
	eCDD_PRESETS_FACTORY2 = 3,
	eCDD_PRESETS_FACTORY3 = 4,
	eCDD_PRESETS_FACTORY4 = 5,
	eCDD_PRESETS_FENCE
} LOUD_cdd_presets;

typedef enum {
	eCOMPENSATION_EQ_INVALID = -1,
	eCOMPENSATION_EQ_FLAT = 0,
	eCOMPENSATION_EQ_2_3_BOXES = 1,
	eCOMPENSATION_EQ_4_5_BOXES = 2,
	eCOMPENSATION_EQ_6_8_BOXES = 3,
	eCOMPENSATION_EQ_FENCE
} LOUD_compensation_eq;

typedef enum {
	eXOVER_TYPE_INVALID = -1,
	eXOVER_TYPE_BYPASS = 0,
	eXOVER_TYPE_VARIABLE = 1,
	eXOVER_TYPE_RSX = 2,
	eXOVER_TYPE_FENCE
} LOUD_xover_type;

typedef enum {
	eLOCKOUT_INVALID = -1,
	eLOCKOUT_OFF = 0,
	eLOCKOUT_RP_SOFT_LOCK = 1,
	eLOCKOUT_RP_HARD_LOCK = 2,
	eLOCKOUT_FENCE
} LOUD_lockout;

#endif	// __LOUD_ENUM_H__
