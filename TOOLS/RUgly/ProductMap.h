// DO NOT EDIT THIS FILE

#ifndef __PRODUCT_MAP_H__
#define __PRODUCT_MAP_H__

//#include "Hal_types.h"
#include "LOUD_types.h"
#include "LOUD_enums.h"
#include "OLY_meta.h"

typedef struct {
	int nTarget;
	int nParamNum;
	int nIDC;		// the controller ID
	int nIDCValue;	// for meters, this is the printout of the actual value
//	*tParameterDesc pParameterDesc;
} ControlDesc;			// attach a Description to a control object 

typedef struct {
	char str[30];
	int nIDC;
} tStringIDC; 




#define	SHOWNAMES 1

typedef struct {						
#if(SHOWNAMES)						
	char             pName[50];			
#endif								
	int      typeEnum;			
	unsigned short   typeInstance;		
	int    effectEnum;		
	unsigned short   effectInstance;	
	int qualEnum;			
	unsigned short   qualInstance;		
	int paramEnum;			
	unsigned int     linkedChannelPID;
	unsigned int     linkedEffectPID;
	unsigned short   format;			
	unsigned int     minValue;			
	unsigned int     maxValue;			
	unsigned int     defValue;			
} tParameterDesc;		

#include "OlySpeaker1_map.h"
#include "REDLINEspeaker1_map.h"
//#include "Otto_map.h"
//#include "ANNA_map.h"
#include "OlySpeaker1_meter.h"
#include "REDLINESpeaker1_meter.h"
//#include "Otto_metermap.h"
//#include "ANNA_metermap.h"




//#ifdef WIN32							
//#define SHOWNAMES 1					
//#define SHOWSCALETYPES 1				
//#else									
//#define SHOWNAMES 0					
//#define SHOWSCALETYPES 0				
//#endif								
//
//typedef struct _tParameterDesc_tag {	
//#if(SHOWNAMES)						
//	char  pName[50];					
//#endif								
//	unsigned short  typeEnum;			
//	unsigned short  typeInstance;		
//	unsigned short  effectEnum;			
//	unsigned short  effectInstance;		
//	unsigned short  qualEnum;			
//	unsigned short  qualInstance;		
//	unsigned short  paramEnum;			
//	unsigned short  format;				
//	uint32          minValue;			
//	uint32          maxValue;			
//	uint32          defValue;			
//} tParameterDesc;	

typedef enum {
	ePRODUCT_UNKNOWN = -1,
	ePRODUCT_OLYSPEAKER = 0,
	ePRODUCT_REDLINESPEAKER1,
//	ePRODUCT_FENCE,
} Hal_product;


//
//
//extern tParameterDesc** pProductParameterTables[];
//extern int* nProductParameterTablesMax[];
//
//extern int nProductXMLVersion[];
//
//#define GLOBAL_PARAMETER_MAX	OLYspeaker1_GLOBAL_PARAMETER_MAX		 // largest
//#define SNAPSHOT_PARAMETER_MAX  OLYspeaker1_SNAPSHOT_PARAMETER_MAX		 // largest
//#define METER_PARAMETER_MAX		OLYspeaker1_METER_MAX		 // largest
//#define FIR_PARAMETER_MAX		OLYspeaker1_FIR_PARAMETER_MAX		 // largest
//
//extern int GetParameterDescTable(int nProduct, int nTarget, tParameterDesc** ppParameterDesc, int* pTableLength, int* nXMLVersion);
//
//extern tParameterDesc* GetParameterDesc(int nProductType, int nTarget, int nParamNum);


typedef struct 
{
	char*  pcName;
	char**	pParameterNameList;
} EQGRAPH_EQSelectList;

#endif	// __Hal_MAP_H__
